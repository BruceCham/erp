@bootstrap: "../bower_components/bootstrap/less/";
@import "variables.less";
@import "mixins.less";
//
// Forms
// --------------------------------------------------
@import (reference) "@{bootstrap}forms.less";
label {
    display: inline-block;
    max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
    margin-bottom: 5px;
    font-weight: bold;
}
// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.
// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
    .box-sizing(border-box);
}
// Position radios and checkboxes better
input[type="radio"], input[type="checkbox"] {
    margin: 4px 0 0;
    margin-top: 1px \9; // IE8-9
    line-height: normal;
}
// Set the height of file controls to match text inputs
input[type="file"] {
    display: block;
}
// Make range inputs behave like textual form controls
input[type="range"] {
    display: block;
    width: 100%;
}
// Make multiple select elements height not fixed
select[multiple], select[size] {
    height: auto;
}
// Focus for file, radio, and checkbox
input[type="file"]:focus, input[type="radio"]:focus, input[type="checkbox"]:focus {
    .tab-focus();
}
// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]
.form-control {
    display: block;
    width: 100%;
    height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    padding: @padding-base-vertical @padding-base-horizontal;
    font-size: @font-size-base;
    line-height: @line-height-base;
    color: @input-color;
    background-color: @input-bg;
    background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
    border: 1px solid @input-border;
    border-radius: @input-border-radius;
    // .box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
    // .transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");
    // Customize the `:focus` state to imitate native WebKit styles.
    // .form-control-focus();
    // Placeholder
    .placeholder(#b0b0b0, @font-size-base);
    // Firefox
    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    &[disabled], &[readonly], fieldset[disabled] & {
        cursor: @cursor-disabled;
        background-color: @input-bg-disabled;
        opacity: 1; // iOS fix for unreadable disabled content
    }
    // Reset height for `textarea`s
    textarea& {
        height: auto;
    }
    outline:none;
}
// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari.
@media screen and (-webkit-min-device-pixel-ratio: 0) {
    input[type="date"], input[type="time"], input[type="datetime-local"], input[type="month"] {
        line-height: @input-height-base;
    }
    input[type="date"].input-sm, input[type="time"].input-sm, input[type="datetime-local"].input-sm, input[type="month"].input-sm {
        line-height: @input-height-small;
    }
    input[type="date"].input-lg, input[type="time"].input-lg, input[type="datetime-local"].input-lg, input[type="month"].input-lg {
        line-height: @input-height-large;
    }
}
// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.
.form-group {
    margin-bottom: 10px;
}
// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.radio, .checkbox {
    position: relative;
    display: block;
    margin-top: 10px;
    margin-bottom: 10px;
    label {
        min-height: @line-height-computed; // Ensure the input doesn't jump when there is no text
        padding-left: 20px;
        margin-bottom: 0;
        font-weight: normal;
        cursor: pointer;
    }
}
.radio input[type="radio"], .radio-inline input[type="radio"], .checkbox input[type="checkbox"], .checkbox-inline input[type="checkbox"] {
    position: absolute;
    margin-left: -20px;
    margin-top: 4px \9;
}
.radio + .radio, .checkbox + .checkbox {
    margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}
// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"], input[type="checkbox"] {
    &[disabled], &.disabled, fieldset[disabled] & {
        cursor: @cursor-disabled;
    }
}
// These classes are used directly on <label>s
.radio-inline, .checkbox-inline {
    &.disabled, fieldset[disabled] & {
        cursor: @cursor-disabled;
    }
}
// These classes are used on elements with <label> descendants
.radio, .checkbox {
    &.disabled, fieldset[disabled] & {
        label {
            cursor: @cursor-disabled;
        }
    }
}
.has-error {
    .has-error();
}
.help-block {
    .help-block();
}
// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.
.form-horizontal {
    .radio, .checkbox, .radio-inline, .checkbox-inline {
        margin-top: 0;
        margin-bottom: 0;
        padding-top: (@padding-base-vertical + 1); // Default padding plus a border
    }
    // Account for padding we're adding to ensure the alignment and of help text
    // and other content below items
    .radio, .checkbox {
        min-height: (@line-height-computed + (@padding-base-vertical + 1));
    }
    // Make form groups behave like rows
    .form-group {
        .make-row();
    }
}
